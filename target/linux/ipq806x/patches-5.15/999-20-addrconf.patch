diff --git a/include/net/addrconf.h b/include/net/addrconf.h
index 59940e2..d162dbb 100644
--- a/include/net/addrconf.h
+++ b/include/net/addrconf.h
@@ -495,6 +495,8 @@ static inline bool ipv6_addr_is_all_snoopers(const struct in6_addr *addr)
 		(addr->s6_addr32[3] ^ htonl(0x0000006a))) == 0;
 #endif
 }
+struct net_device *ipv6_dev_find_and_hold(struct net *net, struct in6_addr *addr,
+				 int strict);
 
 #ifdef CONFIG_PROC_FS
 int if6_proc_init(void);
diff --git a/net/ipv6/addrconf.c b/net/ipv6/addrconf.c
index 3a8838b..6484973 100644
--- a/net/ipv6/addrconf.c
+++ b/net/ipv6/addrconf.c
@@ -2042,6 +2042,35 @@ struct inet6_ifaddr *ipv6_get_ifaddr(struct net *net, const struct in6_addr *add
 	return result;
 }
 
+/* ipv6_dev_find_and_hold()
+ *	Find (and hold) net device that has the given address.
+ *	Or NULL on failure.
+ */
+struct net_device *ipv6_dev_find_and_hold(struct net *net, struct in6_addr *addr,
+				 int strict)
+{
+	struct inet6_ifaddr *ifp;
+	struct net_device *dev;
+
+	ifp = ipv6_get_ifaddr(net, addr, NULL, strict);
+	if (!ifp)
+		return NULL;
+
+	if (!ifp->idev) {
+		in6_ifa_put(ifp);
+		return NULL;
+	}
+
+	dev = ifp->idev->dev;
+	if (dev)
+		dev_hold(dev);
+
+	in6_ifa_put(ifp);
+
+	return dev;
+}
+EXPORT_SYMBOL(ipv6_dev_find_and_hold);
+
 /* Gets referenced address, destroys ifaddr */
 
 static void addrconf_dad_stop(struct inet6_ifaddr *ifp, int dad_failed)
