diff --git a/arch/arm/include/asm/cacheflush.h b/arch/arm/include/asm/cacheflush.h
index f76af791bf64fcd16ca5712c8ae4de43e000dafd..a18eef7f006128907c4430aa940c6fdf499940f7 100644
--- a/arch/arm/include/asm/cacheflush.h
+++ b/arch/arm/include/asm/cacheflush.h
@@ -128,8 +128,11 @@ struct cpu_cache_fns {
 	void (*dma_unmap_area)(const void *, size_t, int);
 
 	void (*dma_inv_range)(const void *, const void *);
+	void (*dma_inv_range_no_dsb)(const void *, const void *);
 	void (*dma_clean_range)(const void *, const void *);
+	void (*dma_clean_range_no_dsb)(const void *, const void *);
 	void (*dma_flush_range)(const void *, const void *);
+	void (*dma_flush_range_no_dsb)(const void *, const void *);
 } __no_randomize_layout;
 
 /*
@@ -155,8 +158,11 @@ extern struct cpu_cache_fns cpu_cache;
  * visible to the CPU.
  */
 #define dmac_inv_range			cpu_cache.dma_inv_range
+#define dmac_inv_range_no_dsb		cpu_cache.dma_inv_range_no_dsb
 #define dmac_clean_range		cpu_cache.dma_clean_range
+#define dmac_clean_range_no_dsb		cpu_cache.dma_clean_range_no_dsb
 #define dmac_flush_range		cpu_cache.dma_flush_range
+#define dmac_flush_range_no_dsb		cpu_cache.dma_flush_range_no_dsb
 
 #else
 
@@ -176,8 +182,11 @@ extern void __cpuc_flush_dcache_area(void *, size_t);
  * visible to the CPU.
  */
 extern void dmac_inv_range(const void *start, const void *end);
+extern void dmac_inv_range_no_dsb(const void *start, const void *end);
 extern void dmac_clean_range(const void *start, const void *end);
+extern void dmac_clean_range_no_dsb(const void *start, const void *end);
 extern void dmac_flush_range(const void *, const void *);
+extern void dmac_flush_range_no_dsb(const void *, const void *);
 
 #endif
 
diff --git a/arch/arm/include/asm/glue-cache.h b/arch/arm/include/asm/glue-cache.h
index 89a7ee6822d9bba82bc0e9ebcc0a1598f79cb89e..364d3e6606d9b366bcf400a12151b0a6de4fb974 100644
--- a/arch/arm/include/asm/glue-cache.h
+++ b/arch/arm/include/asm/glue-cache.h
@@ -156,8 +156,11 @@ static inline void nop_dma_unmap_area(const void *s, size_t l, int f) { }
 #define __cpuc_flush_dcache_area	__glue(_CACHE,_flush_kern_dcache_area)
 
 #define dmac_flush_range		__glue(_CACHE,_dma_flush_range)
+#define dmac_flush_range_no_dsb		__glue(_CACHE,_dma_flush_range_no_dsb)
 #define dmac_inv_range			__glue(_CACHE, _dma_inv_range)
+#define dmac_inv_range_no_dsb		__glue(_CACHE, _dma_inv_range_no_dsb)
 #define dmac_clean_range		__glue(_CACHE, _dma_clean_range)
+#define dmac_clean_range_no_dsb		__glue(_CACHE, _dma_clean_range_no_dsb)
 #endif
 
 #endif
diff --git a/arch/arm/mm/cache-v7.S b/arch/arm/mm/cache-v7.S
index 24d97af08254abdb627eff04c9f46ab578a3cbcf..e69c7432706a193eb0fb22140d67ac947dd169c9 100644
--- a/arch/arm/mm/cache-v7.S
+++ b/arch/arm/mm/cache-v7.S
@@ -388,6 +388,42 @@ ENTRY(v7_dma_inv_range)
 	ret	lr
 ENDPROC(v7_dma_inv_range)
 
+/*
+ *	v7_dma_inv_range_no_dsb(start,end)
+ *
+ *	Invalidate the data cache within the specified region; we will
+ *	be performing a DMA operation in this region and we want to
+ *	purge old data in the cache. This API does not do
+ *	"data synchronization barrier". The caller is responsible to
+ *	do dsb after the transaction.
+ *
+ *	- start   - virtual start address of region
+ *	- end     - virtual end address of region
+ */
+ENTRY(v7_dma_inv_range_no_dsb)
+	dcache_line_size r2, r3
+	sub	r3, r2, #1
+	tst	r0, r3
+	bic	r0, r0, r3
+#ifdef CONFIG_ARM_ERRATA_764369
+	ALT_SMP(W(dsb))
+	ALT_UP(W(nop))
+#endif
+	mcrne	p15, 0, r0, c7, c14, 1		@ clean & invalidate D / U line
+	addne	r0, r0, r2
+
+	tst	r1, r3
+	bic	r1, r1, r3
+	mcrne	p15, 0, r1, c7, c14, 1		@ clean & invalidate D / U line
+	cmp	r0, r1
+1:
+	mcrlo	p15, 0, r0, c7, c6, 1		@ invalidate D / U line
+	addlo	r0, r0, r2
+	cmplo	r0, r1
+	blo	1b
+	ret	lr
+ENDPROC(v7_dma_inv_range_no_dsb)
+
 /*
  *	v7_dma_clean_range(start,end)
  *	- start   - virtual start address of region
@@ -410,6 +446,31 @@ ENTRY(v7_dma_clean_range)
 	ret	lr
 ENDPROC(v7_dma_clean_range)
 
+/*
+ *	v7_dma_clean_range_no_dsb(start,end)
+ *
+ *	This API does not do "data synchronization barrier".
+ *	The caller is responsible to do dsb after the transaction.
+ *
+ *	- start   - virtual start address of region
+ *	- end     - virtual end address of region
+ */
+ENTRY(v7_dma_clean_range_no_dsb)
+	dcache_line_size r2, r3
+	sub	r3, r2, #1
+	bic	r0, r0, r3
+#ifdef CONFIG_ARM_ERRATA_764369
+	ALT_SMP(W(dsb))
+	ALT_UP(W(nop))
+#endif
+1:
+	mcr	p15, 0, r0, c7, c10, 1		@ clean D / U line
+	add	r0, r0, r2
+	cmp	r0, r1
+	blo	1b
+	ret	lr
+ENDPROC(v7_dma_clean_range_no_dsb)
+
 /*
  *	v7_dma_flush_range(start,end)
  *	- start   - virtual start address of region
@@ -432,6 +493,31 @@ ENTRY(v7_dma_flush_range)
 	ret	lr
 ENDPROC(v7_dma_flush_range)
 
+/*
+ *	v7_dma_flush_range_no_dsb(start,end)
+ *
+ *	This API does not do "data synchronization barrier".
+ *	The caller is responsible to do dsb after the transaction.
+ *
+ *	- start   - virtual start address of region
+ *	- end     - virtual end address of region
+ */
+ENTRY(v7_dma_flush_range_no_dsb)
+	dcache_line_size r2, r3
+	sub	r3, r2, #1
+	bic	r0, r0, r3
+#ifdef CONFIG_ARM_ERRATA_764369
+	ALT_SMP(W(dsb))
+	ALT_UP(W(nop))
+#endif
+1:
+	mcr	p15, 0, r0, c7, c14, 1		@ clean & invalidate D / U line
+	add	r0, r0, r2
+	cmp	r0, r1
+	blo	1b
+	ret	lr
+ENDPROC(v7_dma_flush_range_no_dsb)
+
 /*
  *	dma_map_area(start, size, dir)
  *	- start	- kernel virtual start address
diff --git a/arch/arm/mm/proc-syms.c b/arch/arm/mm/proc-syms.c
index 33e4a9b8f1ba357e3fd8a03d71a2bff2676ec014..e839a8eecb8fd6a14d78e38087bcb5f8cd7ae604 100644
--- a/arch/arm/mm/proc-syms.c
+++ b/arch/arm/mm/proc-syms.c
@@ -28,8 +28,11 @@ EXPORT_SYMBOL(__cpuc_flush_user_range);
 EXPORT_SYMBOL(__cpuc_coherent_kern_range);
 EXPORT_SYMBOL(__cpuc_flush_dcache_area);
 EXPORT_SYMBOL(dmac_inv_range);
+EXPORT_SYMBOL(dmac_inv_range_no_dsb);
 EXPORT_SYMBOL(dmac_clean_range);
+EXPORT_SYMBOL(dmac_clean_range_no_dsb);
 EXPORT_SYMBOL(dmac_flush_range);
+EXPORT_SYMBOL(dmac_flush_range_no_dsb);
 #else
 EXPORT_SYMBOL(cpu_cache);
 #endif
