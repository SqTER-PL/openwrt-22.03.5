diff --git a/net/core/neighbour.c b/net/core/neighbour.c
index ff04973..1a4d7d4 100644
--- a/net/core/neighbour.c
+++ b/net/core/neighbour.c
@@ -1204,7 +1204,19 @@ static void neigh_update_hhs(struct neighbour *neigh)
 	}
 }
 
+ATOMIC_NOTIFIER_HEAD(neigh_mac_update_notifier_list);
 
+void neigh_mac_update_register_notify(struct notifier_block *nb)
+{
+	atomic_notifier_chain_register(&neigh_mac_update_notifier_list, nb);
+}
+EXPORT_SYMBOL_GPL(neigh_mac_update_register_notify);
+
+void neigh_mac_update_unregister_notify(struct notifier_block *nb)
+{
+	atomic_notifier_chain_unregister(&neigh_mac_update_notifier_list, nb);
+}
+EXPORT_SYMBOL_GPL(neigh_mac_update_unregister_notify);
 
 /* Generic update routine.
    -- lladdr is new lladdr or NULL, if it is not supplied.
@@ -1235,6 +1247,7 @@ static int __neigh_update(struct neighbour *neigh, const u8 *lladdr,
 	int notify = 0;
 	struct net_device *dev;
 	int update_isrouter = 0;
+	struct neigh_mac_update nmu;
 
 	trace_neigh_update(neigh, lladdr, new, flags, nlmsg_pid);
 
@@ -1249,6 +1262,8 @@ static int __neigh_update(struct neighbour *neigh, const u8 *lladdr,
 		new = old;
 		goto out;
 	}
+	memset(&nmu, 0, sizeof(struct neigh_mac_update));
+
 	if (!(flags & NEIGH_UPDATE_F_ADMIN) &&
 	    (old & (NUD_NOARP | NUD_PERMANENT)))
 		goto out;
@@ -1286,6 +1301,9 @@ static int __neigh_update(struct neighbour *neigh, const u8 *lladdr,
 		   - compare new & old
 		   - if they are different, check override flag
 		 */
+		memcpy(nmu.old_mac, neigh->ha, dev->addr_len);
+		memcpy(nmu.update_mac, lladdr, dev->addr_len);
+
 		if ((old & NUD_VALID) &&
 		    !memcmp(lladdr, neigh->ha, dev->addr_len))
 			lladdr = neigh->ha;
@@ -1408,8 +1426,11 @@ static int __neigh_update(struct neighbour *neigh, const u8 *lladdr,
 	if (((new ^ old) & NUD_PERMANENT) || ext_learn_change)
 		neigh_update_gc_list(neigh);
 
-	if (notify)
+	if (notify) {
 		neigh_update_notify(neigh, nlmsg_pid);
+		atomic_notifier_call_chain(&neigh_mac_update_notifier_list, 0,
+					   (struct neigh_mac_update *)&nmu);
+	}
 
 	trace_neigh_update_done(neigh, err);
 
